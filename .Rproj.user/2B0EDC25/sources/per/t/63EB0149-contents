---
title: "Distribution of tuna fisheries near Tristan da Cunha"
author: "Cian Luck"
date: "24 Nov 2021"
output:
  word_document: default
  html_notebook: null
  pdf_document: default
highlight: pygments
toc: yes
toc_float:
  toc_collapsed: yes
toc_depth: 2
editor_options:
  chunk_output_type: inline
---

```{=html}
<style>
body {
text-align: justify}
</style>
```

# Background

The marine protected zone (MPZ) of Tristan da Cunha is the Atlantic's largest no-take area, providing an important conservation area for several marine species, including the endangered Tristan albatross, the southern bluefin tuna, and the near threatened blue shark. While longline fishing is prohibited within the MPZ, longline fishing vessels are extremely active in adjacent waters and often fish right up to the boundary of Tristan da Cunha's waters. The activity of these fisheries has important implications for management of many of the species that Tristan da Cunha aims to conserve. Understanding the scale and distribution of longline fishing effort is vital to understanding the pressures that this activity might be placing on key species of interest, but equally important is identifying how this activity is likely to change over time.

In this analysis we:

1. provided a detalied overview of fishing activity by longline vessels in the waters adjacent to Tristan da Cunha
2. explored multi-year trends in longliner activity
3. compared longline fishing activity to publicly available data sourced from regional fisheries management organisations.
  
# Setup

```{r setup, include=FALSE}
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath("..")) 
```

```{r, include=FALSE}
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
```

Load packages: 

```{r, message=FALSE}
library(tidyverse)  # data manipulation and plotting 
library(bigrquery)  # querying data through BigQuery
library(DBI)        # database interface
library(fishwatchr) # internal R package developed by Global Fishing Watch for common in-house analyses and functions
library(glue)       # used to format SQL queries in R 
library(lubridate)  # format date time objects
library(here)       # useful package for specifying file locations
library(sf)         # simple features - used for spatial analysis
library(extrafont)  # load extra fonts for plotting
library(patchwork)  # arrange multiple plots together
library(terra)      # load and manage raster data
```

Establish connection to Big Query project:

```{r}
con <- DBI::dbConnect(drv = bigrquery::bigquery(), 
                      project = "world-fishing-827", 
                      use_legacy_sql = FALSE)
```

Load detailed shapefile of Tristan da Cunha:

```{r}
# Shapefile of Tristan da Cunha - sourced from OpenStreetMap
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326 # set coordinate reference system to WGS84
```

# Overview of longline fishing activity

This query selected all fishing activity by longline vessels near Tristan da Cunha, and includes in which fishing area (if any) the fishing took place:

```{r}
query_1 <- readr::read_file(str_c("queries", "q_tdc_tuna_dist.sql", sep="/"))
```

Run the query using `fishwatchr::gfw_query()`:

```{r, eval=FALSE}
ll_aoi <- fishwatchr::gfw_query(query = query_1,
                            run_query = TRUE,
                            con = con)$data
```

Alternatively, the queried data can be loaded locally here:

```{r}
ll_aoi <- read_rds("data_production/data/longliner_dist_2016_2021_aoi.rds")
```

How many longline vessels belonging to each flag were active in the north and south fishing areas each year between 2016 and 2021?

First, we created a dataframe that summed the fishing hours (`fishing_hours`) and number of longline vessels (`n_vessels`) per year, flag, and fishing area:

```{r}
ll_vessels_flag_by_year <- ll_aoi %>% 
  # extract year from the date
  mutate(year = date %>% lubridate::year()) %>% 
  group_by(year, best_flag, aoi) %>% 
  summarise(fishing_hours = sum(fishing_hours, na.rm = TRUE),
            n_vessels = n_distinct(ssvid),
            .groups = "keep")
```

Here, we created a barplot of the number of longline vessels active per year, in the **north** fishing area, coloured by vessel flag:

```{r}
# create a summary table of the top 5 most active flags
# useful for plotting
top_flag_n <- ll_aoi %>% 
  filter(aoi == "north") %>% 
  group_by(best_flag) %>% 
  summarise(n_vessels = n_distinct(ssvid)) %>% 
  mutate(prop = n_vessels/sum(n_vessels)) %>% 
  top_n(5, wt = n_vessels) %>%
  arrange(desc(n_vessels)) 

# create a barplot of number of vessels per year, coloured by vessel flag
# save as an object called p_fv_n
p_fv_n <- ll_vessels_flag_by_year %>% 
  filter(aoi == "north") %>% 
  # if the flag is not one of the top 5 most active flags, label it as "other"
  mutate(flag_alt = if_else(best_flag %in% top_flag_n$best_flag, best_flag, "other") %>% 
           factor(levels = c(top_flag_n$best_flag, "other"))) %>% 
  ggplot() +
  geom_col(aes(x = year, y = n_vessels, fill = flag_alt)) +
  scale_fill_manual(values = c(gfw_palette("chart")[1:5], "grey50"),
                    name = "Flag",
                    labels = c("TPE", "JPN", "ESP", "KOR", "CHN", "other")) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021)) +
  labs(subtitle = "North",
       x = "Year",
       y = "Active longliners") + 
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        plot.title = element_blank(),
        plot.subtitle = element_text(size = 14),
        legend.title = element_text(size = 16),
        legend.text = element_text(size = 14),
        strip.text = element_text(size = 16),
        legend.position = "right")
```

Here, we created a barplot of the number of longline vessels active per year, in the **south** fishing area, coloured by vessel flag:

```{r}
# create a summary table of the top 2 most active flags
# useful for plotting
top_flag_s <- ll_aoi %>% 
  filter(aoi == "south") %>% 
  group_by(best_flag) %>% 
  summarise(n_vessels = n_distinct(ssvid)) %>% 
  mutate(prop = n_vessels/sum(n_vessels)) %>% 
  top_n(2, wt = n_vessels) %>%
  arrange(desc(n_vessels))

# create a barplot of number of vessels per year, coloured by vessel flag
# save as an object called p_fv_s
p_fv_s <- ll_vessels_flag_by_year %>% 
  filter(aoi == "south") %>% 
  # if the flag is not one of the top 5 most active flags, label it as "other"
  mutate(flag_alt = if_else(best_flag %in% top_flag_s$best_flag, best_flag, "other") %>% 
           factor(levels = c(top_flag_s$best_flag, "other"))) %>% 
  ggplot() +
  geom_col(aes(x = year, y = n_vessels, fill = flag_alt)) +
  scale_fill_manual(values = c(gfw_palette("chart")[c(1,3)],"grey50"),
                    name = "Flag") +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021)) +
  labs(subtitle = "South",
       x = "Year",
       y = "Active longliners") + 
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        plot.subtitle = element_text(size = 14),
        legend.title = element_text(size = 16),
        legend.text = element_text(size = 14),
        strip.text = element_text(size = 16),
        legend.position = "right")
```

Then we combined the two plots into one using `patchwork`

```{r, warning=FALSE, fig.width=7, fig.height=5}
(p_fv_n / p_fv_s) + 
  plot_annotation(title = "Number of longline vessels active per year", 
                  theme = theme_gfw_cian() + theme(plot.title = element_text(size = 16)))
```

# Trends in longliner activity over time

We wanted to look at how fishing activity by longline vessels has changed in the north and south fishing areas, between 2016 and 2021. 

First, we create a monthly summary of longline activity (fishing hours and number of active vessels) in each fishing area:

```{r}
ll_monthly_summary <- ll_aoi %>% 
  # include only positions inside either the north or south area of interest
  filter(!is.na(aoi)) %>% 
  # this code rounds every date down to the beginning of the month
  mutate(month = lubridate::floor_date(date, unit = "month")) %>% 
  # summarise fishing hours and n_vessels per month and flag
  group_by(month, aoi) %>% 
  summarise(fishing_hours = sum(fishing_hours, na.rm = TRUE),
            n_vessels = n_distinct(ssvid, na.rm = TRUE),
            .groups = "keep")
```

We also wanted to include sea surface temperature (SST) data to look at how these trends might correlate with SST. In this analysis we used data sourced from the [Aqua Modis](https://neo.gsfc.nasa.gov/view.php?datasetId=MYD28M) project.

Here, we used the `terra` package to read in raster files of monthly average SST data near Tristan da Cunha:

```{r, eval=FALSE}
# read in raster filenames
file_names_sst <- list.files(path = "data_production/data/rasters/aqua_modis_sst_float_tiff", pattern = "*.tiff", full.names = TRUE)

# load these files as a single multi-layer raster
sst_rast <- terra::rast(file_names_sst) 

# change the names of each raster layer to the year and month (format: YYYY-MM)
names(sst_rast) <-  names(sst_rast) %>% str_sub(8, -7)

# Replace outlier temperatures (>100Â°C) with NA
sst_rast[sst_rast >= 100] <- NA
```

Alternatively, the multi-layer raster can be loaded locally here:

```{r}
sst_rast <- terra::rast("data_production/data/rasters/sst_2016_2021_multiyear.tiff")
```

We created spatial objects of the fishing areas (also referred to as areas of interest, coded as `aoi_` in this case) using the simple features (`sf`) package. This allowed us to extract relevant SST data for each area:

```{r, eval=FALSE}
# create a geometry object including the dimensions of the northern fishing area
aoi_geom_n <- list(rbind(c(-20,-30), c(10,-30), c(10,-40), c(-20,-40), c(-20,-30))) %>% 
  st_polygon() %>% 
  st_sfc(crs = 4326) # set coordinate reference system to WGS84

# convert this to a simple features dataframe with a single data column (id = "north")
aoi_sf_n <- data.frame(id = "north") %>% 
  st_sf(geometry = aoi_geom_n)

# create a geometry object including the dimensions of the southern fishing area
aoi_geom_s <- list(rbind(c(-20,-40), c(15,-40), c(15,-50), c(-20,-50), c(-20,-40))) %>% 
  st_polygon() %>% 
  st_sfc(crs = 4326)

# convert this to a simple features dataframe with a single data column (id = "south")
aoi_sf_s <- data.frame(id = "south") %>% 
  st_sf(geometry = aoi_geom_s)

# bind the two sf dataframes together
aoi_sf <- rbind(aoi_sf_n, aoi_sf_n)
```

From each monthly raster we calculated the following SST information:

* minimum
* mean
* standard deviation (sd)
* maximum

```{r, eval=FALSE}
# north fishing area
sst_north_summary <- sst_rast %>% 
  # extract all sst values within north fishing area 
  terra::extract(vect(aoi_sf_n)) %>% 
  # summarise sst data
  group_by(ID) %>% 
  summarise(across(names(sst_rast), list(min = ~min(.x, na.rm = TRUE),  
                                              mean = ~mean(.x, na.rm = TRUE), 
                                              sd = ~sd(.x, na.rm = TRUE),
                                              max = ~max(.x, na.rm = TRUE)))) %>% 
  # the rest of the code reformats the data into our preferred structure
  pivot_longer(cols = -ID) %>% 
  separate(name, into = c("date", "name"), sep = "_") %>% 
  pivot_wider(names_from = name,
              values_from = value) %>% 
  mutate(aoi = "north") %>% 
  dplyr::select(date, aoi, min, mean, sd, max)

# south fishing area
sst_south_summary <- terra::extract(sst_rast, vect(aoi_sf_s)) %>% 
  group_by(ID) %>% 
  summarise(across(names(sst_rast), list(min = ~min(.x, na.rm = TRUE), 
                                              mean = ~mean(.x, na.rm = TRUE), 
                                              sd = ~sd(.x, na.rm = TRUE),
                                              max = ~max(.x, na.rm = TRUE)))) %>% 
  pivot_longer(cols = -ID) %>%
  separate(name, into = c("date", "name"), sep = "_") %>% 
  pivot_wider(names_from = name,
              values_from = value) %>% 
  mutate(aoi = "south") %>% 
  dplyr::select(date, aoi, min, mean, sd, max)

# rbind both summary dataframes together
sst_summary <- rbind(sst_north_summary, sst_south_summary)
```

Alternatively, the SST summary data can be loaded locally here:

```{r}
sst_summary <- read_rds("data_production/data/sst_summary_longliner_aoi_2016_2021.rds")
```

We formatted the data to code `date` as a datetime object, then extracted `month` and `year` from `date`.

```{r}
sst_summary <- sst_summary %>% 
  mutate(date = date %>% lubridate::ym(),
         month = date %>% lubridate::month(),
         year = date %>% lubridate::year())
```

We merged the monthly summaries of longline fishing activity with monthly summaries of SST:

```{r}
ll_sst_month <- merge(x = ll_monthly_summary, 
                      y = sst_summary %>% 
                        # rename columns to avoid confusion in combined dataframe
                        dplyr::select(month = date, aoi, sst_min = min, sst_mean = mean, sst_sd = sd, sst_max = max), 
                      # merge by month and area of interest (aoi)
                      by = c("month", "aoi"), all.x = TRUE)
```

Here we created a combined plot of monthly fishing hours, number of active vessels, and mean (+/- standard deviation) SST in the north and south fishing areas. We did this by creating three separate plots (vessel hours, number of vessels, SST), and then stacking these plots together using `patchwork`

```{r, warning=FALSE, fig.width=10, fig.height=5}
# create a set of labels for annotating the plots
aoi_labs <- c("north" = "North", "south" = "South")

# barplot of fishing hours per month
p_hours <- ll_sst_month %>% 
  ggplot() +
  geom_col(aes(x = month, y = fishing_hours), fill = gfw_palette("chart")[1]) +
  scale_x_date(date_breaks = "1 year",
             date_labels = "%Y",
             limits = c(ymd("2016-01-01"), ymd("2021-12-31"))) +
  labs(x = "Date (monthly bins)",
       y = "Fishing hours") + 
  scale_y_continuous(limits = c(0, 20000)) +
  # split the plot into facets for the north and south areas
  facet_grid(.~aoi,
             labeller = labeller(aoi = aoi_labs)) +
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 16),
        axis.text = element_text(size = 12),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        plot.title = element_text(size = 16),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        strip.text = element_text(size = 16),
        legend.position = "bottom",
        panel.spacing = unit(2, "lines"))

# barplot of number of active longline vessels per month
p_fv <- ll_sst_month %>% 
  ggplot() +
  geom_col(aes(x = month, y = n_vessels), fill = gfw_palette("chart")[1]) +
  scale_x_date(date_breaks = "1 year",
             date_labels = "%Y",
             limits = c(ymd("2016-01-01"), ymd("2021-12-31"))) +
  labs(x = "Date (monthly bins)",
       y = "Vessels") + 
  scale_y_continuous(limits = c(0, 45)) +
  facet_grid(.~aoi,
             labeller = labeller(aoi = aoi_labs)) +
  theme_gfw_cian() +
   theme(axis.title = element_text(size = 16),
        axis.text = element_text(size = 12),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        plot.title = element_text(size = 16),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        strip.text = element_blank(),
        legend.position = "bottom",
        panel.spacing = unit(2, "lines"))

# line and ribbon plot of mean (+/- SD) SST per month
p_sst <- ll_sst_month %>% 
ggplot() +
  geom_ribbon(aes(x = month, ymin = sst_mean - sst_sd, ymax = sst_mean + sst_sd),
              fill = gfw_palette("chart")[5], alpha = 0.2) +
  geom_line(aes(x = month, y = sst_mean), colour = gfw_palette("chart")[5]) +
  scale_x_date(date_breaks = "1 year",
             date_labels = "%Y",
             limits = c(ymd("2016-01-01"), ymd("2021-12-31"))) +
  labs(x = "Date",
       y = "SST (Â°C)"
       ) +
  scale_y_continuous(limits = c(0, 25)) +
  facet_grid(.~aoi,
             labeller = labeller(aoi = aoi_labs)) +
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 16),
        axis.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        legend.title = element_text(size = 16),
        legend.text = element_text(size = 14),
        strip.text = element_blank(),
        legend.position = "bottom",
        panel.spacing = unit(2, "lines"))

# combine plots one on top of another
p_hours / p_fv / p_sst + 
  plot_annotation(title = "Fishing activity by longline vessels and sea surface temperature (SST)",
                  theme = theme_gfw_cian() + theme(plot.title = element_text(size = 22)))
```

# Comparisons with RFMO datasets

## CCSBT: southern bluefin tuna catch

At the time of writing, the Commission for the Conservation of Southern Bluefin Tuna (CCSBT) have published annual reported catch data for southern bluefin tuna. We compared the observed trends in declining fishing activity by vessels targeting southern bluefin tuna in the southern fishing area with reported southern bluefin tuna catch over the same period, in the same area.

Catch data was sourced from the CCSBT data repository, accessed (here)[https://www.ccsbt.org/en/content/sbt-data. Data was downloaded as a csv and uploaded into R.

```{r}
# load catch data locally
sbt_catch <- read.csv("data_production/data/sbt_catch_ccsbt_1965_2020.csv")
```

We filtered these data to only include data from 2016 to 2020 and only within the south fishing area, and tidied up the formatting of date and catch (`tonnes`) columns:

```{r}
sbt_catch <- sbt_catch %>% 
  filter(year %>% between(2016, 2020),
         lon %>% between(-20, 15),
         lat %>% between(-50, -40)) %>% 
  mutate(date = str_c(year, month, sep = "-") %>% lubridate::ym(),
         tonnes = tonnes %>% as.numeric())
```

Here we plotted the total catch by month:

```{r, warning=FALSE, fig.width=10, fig.height=5}
p_s_catch <- sbt_catch %>% 
  group_by(date) %>% 
  summarise(tonnes = sum(tonnes)) %>% 
  ggplot() +
  geom_col(aes(x = date, y = tonnes), fill = gfw_palette("chart")[1]) +
  scale_x_date(date_breaks = "1 year",
             date_labels = "%Y",
             limits = c(ymd("2016-01-01"), ymd("2020-12-31"))) +
  labs(x = "Date (monthly bins)",
       y = "SBT catch (tonnes)") + 
  # scale_y_continuous(limits = c(0, 20000)) +
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        strip.text = element_text(size = 16),
        legend.position = "bottom")


p_s_hours_2 <- ll_sst_month %>% 
  filter(aoi == "south") %>% 
  ggplot() +
  geom_col(aes(x = month, y = fishing_hours), fill = gfw_palette("chart")[1]) +
  scale_x_date(date_breaks = "1 year",
             date_labels = "%Y",
             limits = c(ymd("2016-01-01"), ymd("2020-12-31"))) + # change the time period to up to 2020
  labs(x = "Date (monthly bins)",
       y = "Fishing hours") + 
  scale_y_continuous(limits = c(0, 20000)) +
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        plot.title = element_text(size = 16),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        strip.text = element_text(size = 16),
        legend.position = "bottom")

p_s_hours_2 / p_s_catch +
  plot_annotation(title = "Fishing activity by longline vessels and catch of Southern Bluefin Tuna (SBT)",
                  subtitle = "Southern fishing area",
                  theme = theme_gfw_cian() + theme(plot.title = element_text(size = 16), plot.subtitle = element_text(size = 14)))
```

## ICCAT: blue shark catch

Tristan da Cunha has been recognised as an important conservation area for blue sharks, a near threatened species which is often caught as incidental bycatch but may also be the target species of certain fisheries. Looking at the catch data reported to ICCAT, we can see that Spanish-flagged longline vessels have caught more blue sharks throughout the Southern Atlantic than any other flag.

Here we load the data on reported blue shark catch per flag in the South Atlantic, sourced from ICCAT statistical [databases](https://www.iccat.int/en/accesingdb.HTML):

```{r}
bsh_catch <- read.csv("data_production/data/iccat_bsh_catch_atlantic_south_2010_2020.csv")

# reformat data into a more usable structure
bsh_catch <- bsh_catch %>% 
  pivot_longer(cols = X2010:X2020,
               names_to = "year",
               values_to = "catch") %>% 
  mutate(year = year %>% str_sub(start = 2) %>% as.numeric())
```

Here we plotted the catch of blue shark by flag, reduced to the 10 flags that caught the most blue shark:

```{r, warning = FALSE, fig.width=7, fig.height=5}
# create a summary table of the top 10 flags that caught the most blue shark
# useful for plotting
bsh_top_flags <- bsh_catch %>%
  filter(!is.na(flag),
         year %>% between(2016, 2020)) %>% 
  group_by(flag) %>% 
  summarise(catch = sum(catch, na.rm=TRUE)) %>% 
  arrange(desc(catch)) %>% 
  top_n(10)

# create a barplot of total blue shark catch per year per flag
bsh_catch %>% 
  mutate(flag = flag %>% factor(levels = bsh_top_flags$flag)) %>% 
  filter(!is.na(flag),
         year %>% between(2016, 2020)) %>% 
  ggplot() +
    geom_col(aes(x = flag, y = catch), fill = gfw_palette("chart")[1]) +
    scale_x_discrete(labels = c("ESP", "PRT", "BRA", "JPN", "NAM", "TPE", "ZAF", "CIV", "KOR", "BLZ")) +
    labs(x = "Flag",
         y = "BSH catch (tonnes)",
         title = "Blue shark (BSH) catch in the South Atlantic reported to ICCAT",
         subtitle = "2016 - 2020") + 
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        legend.position = "bottom")
```

Next we plotted the total blue shark catch by Spanish-flagged longline vessels each year (2016-2020) in the South Atlantic:

```{r, fig.width=7, fig.height=5}
bsh_catch %>% 
  # filter to only include catch by Spanish-flagged vessels between 2016 and 2020
  filter(flag == "EU-EspaÃ±a",
         year %>% between(2016, 2020)) %>% 
  ggplot() +
    geom_col(aes(x = year, y = catch), fill = gfw_palette("chart")[1]) +
    labs(x = "Year",
         y = "BSH catch (tons)",
         title = "Blue shark (BSH) catch by Spanish-flagged longline vessels\nin the South Atlantic reported to ICCAT") + 
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        strip.text = element_text(size = 16),
        legend.position = "bottom")
```

Then we plotted the fishing effort each year (2016-2020) by Spanish-flagged longline vessels in the north fishing area:

```{r}
ll_aoi %>% 
  filter(aoi == "north",
         best_flag == "ESP") %>% 
  mutate(year = date %>% lubridate::year()) %>% 
  group_by(year) %>% 
  summarise(fishing_hours = sum(fishing_hours, na.rm = TRUE),
            n_vessels = n_distinct(ssvid, na.rm = TRUE),
            .groups = "keep") %>% 
  ggplot() +
  geom_col(aes(x = year, y = fishing_hours), fill = gfw_palette("chart")[1]) +
  labs(x = "Year",
       y = "Fishing hours",
       title = "Fishing effort by Spanish-flagged longline vessels",
       subtitle = "Northern fishing area") + 
  scale_x_continuous(n.breaks = 6) +
  theme_gfw_cian() +
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.subtitle = element_text(size = 14),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        legend.position = "bottom")
    
```
