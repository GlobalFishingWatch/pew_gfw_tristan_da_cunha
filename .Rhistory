group_by(year) %>%
summarise(fishing_hours = sum(fishing_hours, na.rm = TRUE),
n_vessels = n_distinct(ssvid, na.rm = TRUE),
.groups = "keep") %>%
ggplot() +
geom_col(aes(x = year, y = fishing_hours), fill = gfw_palette("chart")[1]) +
labs(x = "Year",
y = "Fishing hours",
title = "Fishing effort by Spanish-flagged longline vessels",
subtitle = "Northern fishing area") +
scale_x_continuous(n.breaks = 6) +
theme_gfw_cian() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "bottom")
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
library(tidyverse)    # data manipulation and plotting
library(bigrquery)    # querying data through BigQuery
library(DBI)          # database interface
library(fishwatchr)   # internal R package developed by Global Fishing Watch for common in-house analyses and functions
library(glue)         # used to format SQL queries in R
library(lubridate)    # format date time objects
library(here)         # useful package for specifying file locations
library(sf)           # simple features - used for spatial analysis
library(extrafont)    # load extra fonts for plotting
library(ggrepel)      # useful package for adding labels to ggplot objects
# Areas to be Avoided (ATBA)
atba_sf <- sf::st_read("geodata/tdc_atba/ATBA_consolidate_25nm_buffer_wgs84.shp")
st_crs(atba_sf) <- 4326 # set coordinate reference system to WGS84
# Shapefiles of Tristan da Cunha and Gough Island - sourced from OpenStreetMap
tdc_sf <- sf::st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326
# Shapefile of Tristan EEZ only - sourced from Marine Regions
eez_tdc <- fishwatchr::eez_sf %>% filter(MRGID_EEZ1 == 8382)
vt_gridded <- readr::read_rds("data_production/data/gridded-vessel-activity-2019-2021.rds")
vt_transits <- readr::read_rds("data_production/data/vessel-traffic-eez-only-transit_id_fixed_v4.rds")
# which transits passed through the atba
transit_info <- vt_transits %>%
group_by(transit_id_eez) %>%
summarise(through_atba = sum(as.numeric(inside_atba)) > 0)
vt_transits <- vt_transits %>%
merge(transit_info, by = "transit_id_eez", all.x = TRUE)
# which transits slowed while in the atba
transit_speed <- vt_transits %>%
filter(inside_atba == TRUE) %>%
group_by(transit_id_eez) %>%
summarise(slowed_in_atba = min(speed_knots) <= 0.2)
vt_transits <- vt_transits %>%
merge(transit_speed, by = "transit_id_eez", all.x = TRUE)
transit_ports <- readr::read_rds("data_production/data/transit_ports_c4.rds")
transit_ports <- readr::read_rds("data_production/data/transit_ports_c4.rds")
transit_ports
# create long version of dataframe
# filter to only include ports of origin
# create a col called cat (short for category) and populate with "origin"
ports_origin <- transit_ports %>%
filter(!is.na(trip_start_anchorage_label)) %>%
mutate(port_label = str_c(trip_start_anchorage_label, trip_start_anchorage_country, sep = ", ")) %>%
group_by(port_label) %>%
summarise(n_voyages = n(),
lon = mean(trip_start_anchorage_lon, na.rm = TRUE),
lat = mean(trip_start_anchorage_lat, na.rm = TRUE)) %>%
mutate(cat = "origin")
# note there are 6 fewer destinations as 6 trips were still active at the end of our time range
# and hadn't yet reached a port
# filter to only include ports of origin
# create a col called cat (short for category) and populate with "origin"
ports_destination <- transit_ports %>%
filter(!is.na(trip_end_anchorage_label)) %>%
mutate(port_label = str_c(trip_end_anchorage_label, trip_end_anchorage_country, sep = ", ")) %>%
group_by(port_label) %>%
summarise(n_voyages = n(),
lon = mean(trip_end_anchorage_lon, na.rm = TRUE),
lat = mean(trip_end_anchorage_lat, na.rm = TRUE)) %>%
mutate(cat = "destination")
# bind the two dataframes together
ports_long <- rbind(ports_origin, ports_destination)
ports_long
n_distinct(ports_long$port_label)
# set the bounding are for the map
bounding_ports <- fishwatchr::transform_box(xlim = c(min(ports_long$lon) - 1,
max(ports_long$lon) + 1),
ylim = c(min(ports_long$lat) - 1,
max(ports_long$lat) + 1),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# create the map using ggplot2
ports_long %>%
# here we wanted to summarise the number of pots starting OR ending in each port
# so we used group_by(port_label), excluding the origin/destination category
group_by(port_label) %>%
summarise(n_voyages = sum(n_voyages), .groups = "keep",
lon = mean(lon),
lat = mean(lat)) %>%
ggplot() +
fishwatchr::geom_gfw_eez(theme = 'dark') +
fishwatchr::geom_gfw_land(theme = 'dark') +
geom_point(aes(x = lon, y = lat, size = n_voyages), alpha = 0.5, colour = gfw_palette("map_reception_light")[4]) +
scale_size_continuous(name = "No. visits") +
geom_sf(data = atba_sf, colour = gfw_palette("diverging")[1], linetype = 1, fill = NA) +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
labs(title = "Ports visited by vessels transiting through ATBA",
subtitle = "April 1, 2020 to June 30, 2021") +
theme_gfw_map_cian(theme = 'dark') +
theme(legend.position = "bottom",
plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
coord_sf(xlim = c(bounding_ports$box_out[['xmin']], bounding_ports$box_out[['xmax']]),
ylim = c(bounding_ports$box_out[['ymin']], bounding_ports$box_out[['ymax']]),
crs = bounding_ports$out_crs)
transits_post_atba <- vt_transits %>%
filter(slowed_in_atba == FALSE,
through_atba == TRUE,
date >= ymd("2020-04-01"),
!ssvid %in% sailing_vessels$ssvid) %>%
distinct(trip_id) %>%
pull(trip_id)
sailing_vessels <- vessels_by_n_transits %>%
unnest(shiptype) %>%
group_by(ssvid) %>%
top_n(1, wt = count) %>%
filter(best_flag == "FRA")
vessels_by_n_transits <- vt_transits %>%
filter(date >= ymd("2020-04-01"), # only inlucde transits after the ATBA was implemented
slowed_in_atba == FALSE, # that did not slow below 0.2 knots inside the ATBA
through_atba == TRUE) %>% # from transits that passed through the atba
group_by(ssvid, year) %>%
summarise(n_transits = n_distinct(transit_id_atba, na.rm = TRUE),
.groups = "keep") # count the number of transit_id_atba values
vessels_by_n_transits
sailing_vessels <- vessels_by_n_transits %>%
unnest(shiptype) %>%
group_by(ssvid) %>%
top_n(1, wt = count) %>%
filter(value == "Sailing")
sailing_vessels <- vessels_by_n_transits %>%
unnest(shiptype) %>%
group_by(ssvid) %>%
top_n(1, wt = count) %>%
filter(best_flag == "FRA")
vessels_by_n_transits <- readr::read_rds("data_production/data/vessels_by_n_transits_v2.rds")
sailing_vessels <- vessels_by_n_transits %>%
unnest(shiptype) %>%
group_by(ssvid) %>%
top_n(1, wt = count) %>%
filter(value == "Sailing")
sailing_vessels <- vessels_by_n_transits %>%
unnest(shiptype) %>%
group_by(ssvid) %>%
top_n(1, wt = count) %>%
filter(best_flag == "FRA")
transits_post_atba <- vt_transits %>%
filter(slowed_in_atba == FALSE,
through_atba == TRUE,
date >= ymd("2020-04-01"),
!ssvid %in% sailing_vessels$ssvid) %>%
distinct(trip_id) %>%
pull(trip_id)
transits_post_atba
transits_post_atba %>% head(10)
transits_post_atba[1:10]
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# Define a polygon of the area of interest to the southeast of Gough Island as a dataframe
aoi_poly <- data.frame(
id = 'aoi',
x = c(-18, 12, 12, -18, -18),
y = c(-40, -40, -46, -46, -40)
)
# set the bounding area for the map
bounding_1 <- fishwatchr::transform_box(xlim = c(-62, 25),
ylim = c(-25, -46),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# make map with ggplot2
ll_ns_gridded %>%
# only include data south of 25Â°S, where night setting is required
filter(lat_bin < -25) %>%
ggplot() +
geom_raster(aes(x = lon_bin,
y = lat_bin,
fill = ratio_ns)) +
fishwatchr::geom_gfw_eez(lwd = 1) +
fishwatchr::geom_gfw_land() +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
geom_path(data = aoi_poly, aes(x = x, y = y, group = id), colour = "white") +
labs(title = "Ratio of night to day setting in South Atlantic",
subtitle = "Jan. 1, 2019 to June 30, 2021",
x = "lon",
y = "lat") +
scale_fill_gradientn(colours = c(gfw_palette("orange")[1], wes_palette("Darjeeling1")[5]),
limits = c(0,1),
oob = scales::squish,
na.value = NA,
name = NULL,
breaks = c(0,1),
labels = c("All day sets", "All night sets")) +
theme_gfw_map_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.title = element_blank(),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_1$box_out[['xmin']], bounding_1$box_out[['xmax']]),
ylim = c(bounding_1$box_out[['ymin']], bounding_1$box_out[['ymax']]),
crs = bounding_1$out_crs)
library(tidyverse)  # data manipulation and plotting
library(bigrquery)  # querying data through BigQuery
library(DBI)        # database interface
library(fishwatchr) # internal R package developed by Global Fishing Watch for common in-house analyses and functions
library(glue)       # used to format SQL queries in R
library(lubridate)  # format date time objects
library(here)       # useful package for specifying file locations
library(sf)         # simple features - used for spatial analysis
library(extrafont)  # load extra fonts for plotting
library(wesanderson) # additional colour palettes for plotting
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
library(tidyverse)  # data manipulation and plotting
library(bigrquery)  # querying data through BigQuery
library(DBI)        # database interface
library(fishwatchr) # internal R package developed by Global Fishing Watch for common in-house analyses and functions
library(glue)       # used to format SQL queries in R
library(lubridate)  # format date time objects
library(here)       # useful package for specifying file locations
library(sf)         # simple features - used for spatial analysis
library(extrafont)  # load extra fonts for plotting
library(patchwork)  # arrange multiple plots together
library(terra)      # load and manage raster data
# Shapefile of Tristan da Cunha - sourced from OpenStreetMap
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# Shapefile of Tristan da Cunha - sourced from OpenStreetMap
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326 # set coordinate reference system to WGS84
bsh_catch <- read.csv("data_production/data/iccat_bsh_catch_atlantic_south_2010_2020.csv")
# reformat data into a more usable structure
bsh_catch <- bsh_catch %>%
pivot_longer(cols = X2010:X2020,
names_to = "year",
values_to = "catch") %>%
mutate(year = year %>% str_sub(start = 2) %>% as.numeric())
bsh_catch %>%
# filter to only include catch by Spanish-flagged vessels between 2016 and 2020
filter(flag == "EU-EspaÃ±a",
year %>% between(2016, 2020)) %>%
ggplot() +
geom_col(aes(x = year, y = catch), fill = gfw_palette("chart")[1]) +
labs(x = "Year",
y = "BSH catch (tons)",
title = "Blue shark (BSH) catch by Spanish-flagged longline vessels\nin the South Atlantic reported to ICCAT") +
theme_gfw_cian() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
strip.text = element_text(size = 16),
legend.position = "bottom")
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
library(tidyverse)  # data manipulation and plotting
library(bigrquery)  # querying data through BigQuery
library(DBI)        # database interface
library(fishwatchr) # internal R package developed by Global Fishing Watch for common in-house analyses and functions
library(glue)       # used to format SQL queries in R
library(lubridate)  # format date time objects
library(here)       # useful package for specifying file locations
library(sf)         # simple features - used for spatial analysis
library(extrafont)  # load extra fonts for plotting
library(wesanderson) # additional colour palettes for plotting
con <- DBI::dbConnect(drv = bigrquery::bigquery(),
project = "world-fishing-827",
use_legacy_sql = FALSE)
# Shapefiles of Tristan da Cunha and Gough Island - sourced from OpenStreetMap
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# Shapefiles of Tristan da Cunha and Gough Island - sourced from OpenStreetMap
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326
# filter the shapefile to only include Gough Island - needed for spatial analysis later
gough_sf <- tdc_sf %>% filter(FID == 138822)
# ll_ns stands for longline night setting
ll_ns <- read_rds("data_production/data/night_setting_locations_south_atlantic.rds")
ll_ns_tdc <- ll_ns %>%
filter((start_lon %>% between(-18, 12) & start_lat %>% between(-46, -40)) |
(end_lon %>% between(-18, 12) & end_lat %>% between(-46, -40)))
# ll_ns stands for longline night setting
ll_ns <- read_rds("data_production/data/night_setting_locations_south_atlantic.rds")
ll_ns <- ll_ns %>%
mutate(cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, "night", "day"))
ll_ns_tdc <- ll_ns %>%
filter((start_lon %>% between(-18, 12) & start_lat %>% between(-46, -40)) |
(end_lon %>% between(-18, 12) & end_lat %>% between(-46, -40)))
dawn_times <- ll_ns_tdc %>%
summarise(start_ndawn = mean(start_ndawn)) %>%
mutate(start_ndawn = ymd_hms("2020-01-01 00:00:00") + (start_ndawn*60*60))
ll_ns_tdc %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting and hauling of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ll_ns_tdc %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ll_ns %>% head()
ll_ns %>% dplyr::select(start_time, end_time)
ll_ns %>% dplyr::select(start_time, end_time) %>% tail()
names(ll_ns)
ll_ns$same_day
ll_ns$same_day %>% summary()
ll_ns_tdc %>%
filter(same_day == TRUE) %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ll_ns_tdc %>%
filter(same_day == TRUE) %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ll_ns$set_duration %>% summary()
ll_ns %>% mutate(duration_2 = end_time - start_time) %>% dplyr::select(duration_2) %>% head()
ll_ns %>% mutate(duration_2 = end_time - start_time) %>% dplyr::select(duration_2) %>% mean()
ll_ns %>% mutate(duration_2 = end_time - start_time) %>% dplyr::select(duration_2) %>% summary()
ll_ns %>% mutate(duration_2 = as.numeric(end_time - start_time)) %>% dplyr::select(duration_2) %>% head()
ll_ns %>% mutate(duration_2 = as.numeric(end_time - start_time)) %>% dplyr::select(duration_2) %>% summary()
ll_ns %>% mutate(duration_2 = as.numeric(end_time - start_time)/60) %>% dplyr::select(duration_2) %>% summary()
ll_ns_tdc %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = if_else(same_day == TRUE,
ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours"),
ymd_hms("2021-01-01 00:00:00") + local_time(end_time, units = "hours"))) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
ll_ns_tdc %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
?purrr::map()
