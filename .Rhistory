axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
strip.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_2$box_out[['xmin']], bounding_2$box_out[['xmax']]),
ylim = c(bounding_2$box_out[['ymin']], bounding_2$box_out[['ymax']]),
crs = bounding_2$out_crs)
squid_tracks <- read_rds("data_production/data/squid_jigger_tracks_gaps.rds")
squid_gaps <- read_rds("data_production/data/ais_gaps_squid.rds")
# filter out trips that cross 180° longitude
# these are complicated to map
trip_sum <- squid_tracks %>%
group_by(trip_id) %>%
summarise(keep = min(lon) > -120) %>%
filter(keep == TRUE)
# set bounding area
bounding_3 <- transform_box(xlim = c(-120, 180),
ylim = c(-55, 50),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# map tracks and gap events
squid_tracks %>%
# keep only tracks that don't cross 180° longitude
filter(trip_id %in% trip_sum$trip_id) %>%
arrange(timestamp) %>%
ggplot() +
geom_path(aes(x = lon, y = lat, group = trip_id), colour = gfw_palette("tracks")[1], alpha = 0.2) +
geom_sf(data = eez_tdc, fill = NA, colour = "white", size = 1) +
geom_gfw_land() +
geom_sf(data = atba_sf, colour = "red", linetype = 1, fill = NA) +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
# add gap events as points
geom_point(data = squid_gaps, aes(x = off_lon, y = off_lat), colour = gfw_palette("orange")[1], size = 1, alpha = 0.4) +
labs(title = "AIS gap events of squid jigger fishing vessels",
subtitle = "1 Jan. 2019 - 30 June 2021") +
theme_gfw_map_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_3$box_out[['xmin']], bounding_3$box_out[['xmax']]),
ylim = c(bounding_3$box_out[['ymin']], bounding_3$box_out[['ymax']]),
crs = bounding_3$out_crs)
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326
# filter the shapefile to only include Gough Island - needed for spatial analysis later
gough_sf <- tdc_sf %>% filter(FID == 138822)
ll_ns <- read_rds("data_production/data/night_setting_locations_south_atlantic.rds")
ll_ns <- ll_ns %>%
mutate(cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, "night", "day"))
ll_ns_gridded <- ll_ns %>%
dplyr::select(start_lon, set_id, start_lat, end_lon, end_lat, start_time, cat2) %>%
rowwise() %>%
mutate(mean_lon = mean(c(start_lon, end_lon), na.rm = TRUE), # average longitude and latitude between start and end locations
mean_lat = mean(c(start_lat, end_lat), na.rm = TRUE),
lon_bin = floor(mean_lon*10)/10, # set the grid resolution to one 10th of a degree
lat_bin = floor(mean_lat*10)/10,
date = lubridate::date(start_time), # use the start time to assign a date to each set
cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, 1, 0) # recalculate cat3 as a numeric variable (1 = night, 0 = day)
) %>%
group_by(lat_bin, lon_bin) %>%
summarise(n_sets = n_distinct(set_id), # number of sets
ratio_ns = mean(cat3, na.rm = TRUE), # ratio of sets at night:day
.groups = "keep"
)
# create a dataframe of the 10 flags that deployed the most sets in the region
# order these flags by the number of longline sets
# used to reorder the flags in the next plot
top_10_by_flag <- ll_ns %>%
filter(!is.na(best_flag),
start_lat <= -25) %>%
group_by(best_flag) %>%
summarise(n = n()) %>%
top_n(10, wt = n) %>%
arrange(desc(n))
# plot longline sets per flag, coloured by time of setting (night or day)
ll_ns %>%
# include only flags from top 10
filter(best_flag %in% top_10_by_flag$best_flag,
(start_lat <= -25 | end_lat <= -25)) %>%
# reorder best_flag according to the order in top_10_by_flag
mutate(best_flag = best_flag %>%
factor(levels = top_10_by_flag[["best_flag"]]) %>%
recode_factor("TWN" = "TPE")) %>%
ggplot() +
geom_bar(aes(x = best_flag, fill = as.factor(cat3))) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
labs(x = "Flag",
y = "Longline sets",
title = "Night setting by flag",
subtitle = "South Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
legend.position = "bottom")
ll_ns_tdc <- ll_ns %>%
filter((start_lon %>% between(-18, 12) & start_lat %>% between(-46, -40)) |
(end_lon %>% between(-18, 12) & end_lat %>% between(-46, -40)))
ll_ns_tdc %>%
mutate(month = lubridate::month(start_time),
year = lubridate::year(start_time)) %>%
ggplot() +
geom_bar(aes(x = month, fill = cat3)) +
facet_wrap(~year, ncol = 1) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
limits = c(1,12)) +
labs(x = "Month",
y = "Longline sets",
title = "Longline sets per month",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.position = "bottom",
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
strip.text = element_text(size = 16))
# create a dataframe of the 10 flags that deployed the most sets in the region
# order these flags by the number of longline sets
# used to reorder the flags in the next plot
top_aoi_by_flag <- ll_ns_tdc %>%
filter(!is.na(best_flag)) %>%
group_by(best_flag) %>%
summarise(n = n(),
prop = n/nrow(ll_ns_tdc),
n_vessels = n_distinct(ssvid)) %>%
arrange(desc(n))
# plot longline sets per flag, coloured by time of setting (night or day)
ll_ns_tdc %>%
mutate(month = lubridate::month(start_time),
year = lubridate::year(start_time),
best_flag = best_flag %>% factor(levels = top_aoi_by_flag[["best_flag"]])) %>%
filter(best_flag %in% c("JPN", "KOR")) %>%
ggplot() +
geom_bar(aes(x = best_flag, fill = as.factor(cat3))) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
labs(x = "Flag",
y = "Longline sets",
title = "Night setting by flag",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16))
ll_ns_gridded <- ll_ns %>%
dplyr::select(start_lon, set_id, start_lat, end_lon, end_lat, start_time, cat2) %>%
rowwise() %>%
mutate(mean_lon = mean(c(start_lon, end_lon), na.rm = TRUE), # average longitude and latitude between start and end locations
mean_lat = mean(c(start_lat, end_lat), na.rm = TRUE),
lon_bin = floor(mean_lon*10)/10, # set the grid resolution to one 10th of a degree
lat_bin = floor(mean_lat*10)/10,
date = lubridate::date(start_time), # use the start time to assign a date to each set
cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, 1, 0) # recalculate cat3 as a numeric variable (1 = night, 0 = day)
) %>%
group_by(lat_bin, lon_bin) %>%
summarise(n_sets = n_distinct(set_id), # number of sets
ratio_ns = mean(cat3, na.rm = TRUE), # ratio of sets at night:day
.groups = "keep"
)
# define a polygon of the area of interest to the southeast of Gough Island as a dataframe
aoi_poly <- data.frame(
id = 'aoi',
x = c(-18, 12, 12, -18, -18),
y = c(-40, -40, -46, -46, -40)
)
# set the bounding area for the map
bounding_1 <- transform_box(xlim = c(-62, 25),
ylim = c(-25, -46),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# make map with ggplot2
ll_ns_gridded %>%
filter(lat_bin < -25) %>%
ggplot() +
geom_raster(aes(x = lon_bin,
y = lat_bin,
fill = ratio_ns)) +
geom_gfw_eez(lwd = 1) +
geom_gfw_land() +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
geom_path(data = aoi_poly, aes(x = x, y = y, group = id), colour = "white") +
labs(title = "Ratio of night to day setting in South Atlantic",
subtitle = "1 Jan. 2019 - 30 June 2021",
x = "lon",
y = "lat") +
scale_fill_gradientn(colours = c(gfw_palette("orange")[1], wes_palette("Darjeeling1")[5]),
limits = c(0,1),
oob = scales::squish,
na.value = NA,
name = NULL,
breaks = c(0,1),
labels = c("All day sets", "All night sets")) +
theme_gfw_map_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.title = element_blank(),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_1$box_out[['xmin']], bounding_1$box_out[['xmax']]),
ylim = c(bounding_1$box_out[['ymin']], bounding_1$box_out[['ymax']]),
crs = bounding_1$out_crs)
library(tidyverse)
library(bigrquery)
library(DBI)
library(fishwatchr)
library(glue)
library(lubridate)
library(here)
library(sf)
library(extrafont)
library(gt)
library(wesanderson)
rm(list = ls())
gc()
# set working directory to parent folder
knitr::opts_knit$set(root.dir = normalizePath(".."))
# run script with custom ggplot theme functions
source("analysis/theme_gfw modified funs - cian.R", local = knitr::knit_global())
library(tidyverse)
library(bigrquery)
library(DBI)
library(fishwatchr)
library(glue)
library(lubridate)
library(here)
library(sf)
library(extrafont)
library(gt)
library(wesanderson)
tdc_sf <- st_read("geodata/tdc_osm/tristan_da_cunha_archipelago_osm.shp")
st_crs(tdc_sf) <- 4326
# filter the shapefile to only include Gough Island - needed for spatial analysis later
gough_sf <- tdc_sf %>% filter(FID == 138822)
query_1 <- readr::read_file(str_c("queries", "q_tdc_ns_sets_south_atlantic.sql", sep="/"))
ll_ns <- read_rds("data_production/data/night_setting_locations_south_atlantic.rds")
ll_ns <- ll_ns %>%
mutate(cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, "night", "day"))
ll_ns_gridded <- ll_ns %>%
dplyr::select(start_lon, set_id, start_lat, end_lon, end_lat, start_time, cat2) %>%
rowwise() %>%
mutate(mean_lon = mean(c(start_lon, end_lon), na.rm = TRUE), # average longitude and latitude between start and end locations
mean_lat = mean(c(start_lat, end_lat), na.rm = TRUE),
lon_bin = floor(mean_lon*10)/10, # set the grid resolution to one 10th of a degree
lat_bin = floor(mean_lat*10)/10,
date = lubridate::date(start_time), # use the start time to assign a date to each set
cat3 = if_else(cat2 == 2 | cat2 == 5 | cat2 == 7, 1, 0) # recalculate cat3 as a numeric variable (1 = night, 0 = day)
) %>%
group_by(lat_bin, lon_bin) %>%
summarise(n_sets = n_distinct(set_id), # number of sets
ratio_ns = mean(cat3, na.rm = TRUE), # ratio of sets at night:day
.groups = "keep"
)
# define a polygon of the area of interest to the southeast of Gough Island as a dataframe
aoi_poly <- data.frame(
id = 'aoi',
x = c(-18, 12, 12, -18, -18),
y = c(-40, -40, -46, -46, -40)
)
# set the bounding area for the map
bounding_1 <- transform_box(xlim = c(-62, 25),
ylim = c(-25, -46),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# make map with ggplot2
ll_ns_gridded %>%
filter(lat_bin < -25) %>%
ggplot() +
geom_raster(aes(x = lon_bin,
y = lat_bin,
fill = ratio_ns)) +
geom_gfw_eez(lwd = 1) +
geom_gfw_land() +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
geom_path(data = aoi_poly, aes(x = x, y = y, group = id), colour = "white") +
labs(title = "Ratio of night to day setting in South Atlantic",
subtitle = "1 Jan. 2019 - 30 June 2021",
x = "lon",
y = "lat") +
scale_fill_gradientn(colours = c(gfw_palette("orange")[1], wes_palette("Darjeeling1")[5]),
limits = c(0,1),
oob = scales::squish,
na.value = NA,
name = NULL,
breaks = c(0,1),
labels = c("All day sets", "All night sets")) +
theme_gfw_map_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.title = element_blank(),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_1$box_out[['xmin']], bounding_1$box_out[['xmax']]),
ylim = c(bounding_1$box_out[['ymin']], bounding_1$box_out[['ymax']]),
crs = bounding_1$out_crs)
ll_ns %>%
mutate(month = lubridate::month(start_time),
year = lubridate::year(start_time)) %>%
filter(start_lat <= -25 | end_lat <= -25) %>%
ggplot() +
geom_bar(aes(x = month, fill = cat3)) +
facet_wrap(~year, ncol = 1) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
labs(x = "Month",
y = "Longline sets",
title = "Longline sets per month",
subtitle = "South Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
strip.text = element_text(size = 16),
legend.position = "bottom")
# create a dataframe of the 10 flags that deployed the most sets in the region
# order these flags by the number of longline sets
# used to reorder the flags in the next plot
top_10_by_flag <- ll_ns %>%
filter(!is.na(best_flag),
start_lat <= -25) %>%
group_by(best_flag) %>%
summarise(n = n()) %>%
top_n(10, wt = n) %>%
arrange(desc(n))
# plot longline sets per flag, coloured by time of setting (night or day)
ll_ns %>%
# include only flags from top 10
filter(best_flag %in% top_10_by_flag$best_flag,
(start_lat <= -25 | end_lat <= -25)) %>%
# reorder best_flag according to the order in top_10_by_flag
mutate(best_flag = best_flag %>%
factor(levels = top_10_by_flag[["best_flag"]]) %>%
recode_factor("TWN" = "TPE")) %>%
ggplot() +
geom_bar(aes(x = best_flag, fill = as.factor(cat3))) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
labs(x = "Flag",
y = "Longline sets",
title = "Night setting by flag",
subtitle = "South Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
legend.position = "bottom")
ll_ns_tdc <- ll_ns %>%
filter((start_lon %>% between(-18, 12) & start_lat %>% between(-46, -40)) |
(end_lon %>% between(-18, 12) & end_lat %>% between(-46, -40)))
ll_ns_tdc %>%
mutate(month = lubridate::month(start_time),
year = lubridate::year(start_time)) %>%
ggplot() +
geom_bar(aes(x = month, fill = cat3)) +
facet_wrap(~year, ncol = 1) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
limits = c(1,12)) +
labs(x = "Month",
y = "Longline sets",
title = "Longline sets per month",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.position = "bottom",
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
strip.text = element_text(size = 16))
# create a dataframe of the 10 flags that deployed the most sets in the region
# order these flags by the number of longline sets
# used to reorder the flags in the next plot
top_aoi_by_flag <- ll_ns_tdc %>%
filter(!is.na(best_flag)) %>%
group_by(best_flag) %>%
summarise(n = n(),
prop = n/nrow(ll_ns_tdc),
n_vessels = n_distinct(ssvid)) %>%
arrange(desc(n))
# plot longline sets per flag, coloured by time of setting (night or day)
ll_ns_tdc %>%
mutate(month = lubridate::month(start_time),
year = lubridate::year(start_time),
best_flag = best_flag %>% factor(levels = top_aoi_by_flag[["best_flag"]])) %>%
filter(best_flag %in% c("JPN", "KOR")) %>%
ggplot() +
geom_bar(aes(x = best_flag, fill = as.factor(cat3))) +
scale_fill_discrete(type = rev(gfw_palette("chart")[c(1,7)]),
name = "Time of setting",
labels = c("Day", "Night")) +
labs(x = "Flag",
y = "Longline sets",
title = "Night setting by flag",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16))
ll_ns_gridded_2 <- ll_ns %>%
dplyr::select(best_flag, start_lon, set_id, start_lat, end_lon, end_lat, start_time) %>%
rowwise() %>%
mutate(mean_lon = mean(c(start_lon, end_lon), na.rm = TRUE), # average longitude and latitude between start and end locations
mean_lat = mean(c(start_lat, end_lat), na.rm = TRUE),
lon_bin = floor(mean_lon*10)/10, # set the grid resolution to one 10th of a degree
lat_bin = floor(mean_lat*10)/10,
date = lubridate::date(start_time) # use the start time to assign a date to each set
) %>%
group_by(best_flag, lat_bin, lon_bin) %>%
filter(best_flag == max(best_flag)) %>%
mutate(flag_2 = if_else(best_flag %in% c("JPN", "KOR"), best_flag, "other"))
# set the bounding area for the map
bounding_1 <- transform_box(xlim = c(-62, 25),
ylim = c(-25, -46),
output_crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# make map with ggplot2
ll_ns_gridded_2 %>%
filter(lat_bin < -25) %>%
ggplot() +
geom_raster(aes(x = lon_bin,
y = lat_bin,
fill = flag_2)) +
geom_gfw_eez(lwd = 1) +
geom_gfw_land() +
geom_sf(data = tdc_sf, fill = gfw_palette("map_country_dark")[1]) +
labs(title = "Longline sets by Japanese and Korean vessels",
subtitle = "1 Jan. 2019 - 30 June 2021",
x = "lon",
y = "lat") +
scale_fill_manual(values = gfw_palette("diverging")[c(1,7,4)],
labels = c("JPN", "KOR", "other"),
na.value = NA,
name = NULL) +
geom_path(data = aoi_poly, aes(x = x, y = y, group = id), colour = "white") +
theme_gfw_map_cian() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.title = element_blank(),
axis.text = element_text(size = 16),
legend.text = element_text(size = 16)) +
coord_sf(xlim = c(bounding_1$box_out[['xmin']], bounding_1$box_out[['xmax']]),
ylim = c(bounding_1$box_out[['ymin']], bounding_1$box_out[['ymax']]),
crs = bounding_1$out_crs)
dawn_times <- ll_ns_tdc %>%
summarise(start_ndawn = mean(start_ndawn)) %>%
mutate(start_ndawn = ymd_hms("2020-01-01 00:00:00") + (start_ndawn*60*60))
ll_ns_tdc %>%
mutate(start = ymd_hms("2020-01-01 00:00:00") + local_time(start_time, units = "hours"),
end = ymd_hms("2020-01-01 00:00:00") + local_time(end_time, units = "hours")) %>%
dplyr::select(start, end) %>%
pivot_longer(cols = start:end, names_to = "Set", values_to = "time_of_day") %>%
mutate(Set = Set %>% factor(levels = c("start", "end"))) %>%
ggplot() +
# use stat_density instead of geom_density so the legend symbols are lines rather than boxes
stat_density(aes(x = time_of_day, colour = Set, linetype = Set),
geom = "line", position = "identity", alpha = 1, size = 1) +
geom_vline(data = dawn_times, aes(xintercept = start_ndawn), colour = gfw_palette("chart")[5], size = 1) +
scale_x_datetime(date_labels = "%H:%M") +
scale_colour_manual(name = "Setting",
values = c(gfw_palette("chart")[1], "grey50"),
labels = c("Start", "End")) +
scale_linetype_manual(name = "Setting",
values = c(1,2),
labels = c("Start", "End")) +
labs(x = "Time of day",
y = "Proportion of sets",
title = "Time of setting and hauling of longlines",
subtitle = "Southeast Atlantic") +
theme_gfw_cian() +
theme() +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 16),
axis.text = element_text(size = 12),
# axis.text.y = element_blank(),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16))
